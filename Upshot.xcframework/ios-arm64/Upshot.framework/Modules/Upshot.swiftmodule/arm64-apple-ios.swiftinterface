// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Upshot
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import Dispatch
import Foundation
import ImageIO
import JavaScriptCore
import MobileCoreServices
import Photos
import StoreKit
import Swift
import SystemConfiguration
import UIKit
@_exported import Upshot
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TriviaPieView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Upshot.TriviaPieView : Upshot.BKPieChartDelegate, Upshot.BKPieChartDataSource {
}
extension Upshot.TriviaPieView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSlices(in pieChart: Upshot.BKPieChart!) -> Swift.UInt
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pieChart(_ pieChart: Upshot.BKPieChart!, valueForSliceAt index: Swift.UInt) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pieChart(_ pieChart: Upshot.BKPieChart!, textForSliceAt index: Swift.UInt) -> Swift.String!
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pieChart(_ pieChart: Upshot.BKPieChart!, colorForSliceAt index: Swift.UInt) -> UIKit.UIColor!
}
extension UIKit.UIImageView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func load(url: Foundation.URL, completion: @escaping (UIKit.UIImage) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func getImageData(url: Foundation.URL, completion: @escaping (Foundation.Data) -> Swift.Void)
}
@_hasMissingDesignatedInitializers open class InteractiveTutorialElement {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class DescriptionInfo {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class FooterInfo {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ButtonInfo {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InboxControllerManager : ObjectiveC.NSObject {
  @objc public func getUnreadNotificationsCount(pushLimit: Swift.Int, notificationType: Upshot.BKInboxMessageType, appuid: Swift.String, onCompletion: @escaping (_ notificationsCount: Swift.Int) -> Swift.Void)
  @objc public func showInboxController(options: [Swift.String : Any], appuid: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NotificationHandler : ObjectiveC.NSObject {
  @objc public func fetchUsernotifications(appuid: Swift.String, notificationId: Swift.String, limit: Swift.Int, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : Upshot.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : Upshot.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : Upshot.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension Upshot.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : Upshot.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: any Upshot.URLConvertible, method: Upshot.HTTPMethod, headers: Upshot.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .get, parameters: Upshot.Parameters? = nil, encoding: any Upshot.ParameterEncoding = URLEncoding.default, headers: Upshot.HTTPHeaders? = nil) -> Upshot.DataRequest
@discardableResult
public func request(_ urlRequest: any Upshot.URLRequestConvertible) -> Upshot.DataRequest
@discardableResult
public func download(_ url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .get, parameters: Upshot.Parameters? = nil, encoding: any Upshot.ParameterEncoding = URLEncoding.default, headers: Upshot.HTTPHeaders? = nil, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
@discardableResult
public func download(_ urlRequest: any Upshot.URLRequestConvertible, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
public func upload(multipartFormData: @escaping (Upshot.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil, encodingCompletion: ((Upshot.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (Upshot.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any Upshot.URLRequestConvertible, encodingCompletion: ((Upshot.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> Upshot.StreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> Upshot.StreamRequest
open class SessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: Upshot.UploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(any Swift.Error)
  }
  public static let `default`: Upshot.SessionManager
  public static let defaultHTTPHeaders: Upshot.HTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: Upshot.SessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: (any Upshot.RequestAdapter)?
  open var retrier: (any Upshot.RequestRetrier)? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: Upshot.SessionDelegate = SessionDelegate(), serverTrustPolicyManager: Upshot.ServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: Upshot.SessionDelegate, serverTrustPolicyManager: Upshot.ServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .get, parameters: Upshot.Parameters? = nil, encoding: any Upshot.ParameterEncoding = URLEncoding.default, headers: Upshot.HTTPHeaders? = nil) -> Upshot.DataRequest
  open func request(_ urlRequest: any Upshot.URLRequestConvertible) -> Upshot.DataRequest
  @discardableResult
  open func download(_ url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .get, parameters: Upshot.Parameters? = nil, encoding: any Upshot.ParameterEncoding = URLEncoding.default, headers: Upshot.HTTPHeaders? = nil, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
  @discardableResult
  open func download(_ urlRequest: any Upshot.URLRequestConvertible, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: Upshot.DownloadRequest.DownloadFileDestination? = nil) -> Upshot.DownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil) -> Upshot.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: any Upshot.URLRequestConvertible) -> Upshot.UploadRequest
  open func upload(multipartFormData: @escaping (Upshot.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: any Upshot.URLConvertible, method: Upshot.HTTPMethod = .post, headers: Upshot.HTTPHeaders? = nil, encodingCompletion: ((Upshot.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (Upshot.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any Upshot.URLRequestConvertible, encodingCompletion: ((Upshot.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> Upshot.StreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> Upshot.StreamRequest
}
public struct DefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: Upshot.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?, timeline: Upshot.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: Upshot.Result<Value>
  public let timeline: Upshot.Timeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: Upshot.Result<Value>, timeline: Upshot.Timeline = Timeline())
}
extension Upshot.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension Upshot.DataResponse {
  public func map<T>(_ transform: (Value) -> T) -> Upshot.DataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> Upshot.DataResponse<T>
}
public struct DefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: Upshot.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: (any Swift.Error)?, timeline: Upshot.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: Upshot.Result<Value>
  public let timeline: Upshot.Timeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: Upshot.Result<Value>, timeline: Upshot.Timeline = Timeline())
}
extension Upshot.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension Upshot.DownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> Upshot.DownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> Upshot.DownloadResponse<T>
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension Upshot.DefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension Upshot.DataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension Upshot.DefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension Upshot.DownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomActionViewController : Upshot.BKBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public func convertHtmlToAttributedStringWithCSS(font: UIKit.UIFont?, fontSize: CoreFoundation.CGFloat) -> Foundation.NSMutableAttributedString?
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> Upshot.Result<Self.SerializedObject> { get }
}
public struct DataResponseSerializer<Value> : Upshot.DataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> Upshot.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> Upshot.Result<Value>)
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> Upshot.Result<Self.SerializedObject> { get }
}
public struct DownloadResponseSerializer<Value> : Upshot.DownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> Upshot.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> Upshot.Result<Value>)
}
extension Upshot.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (Upshot.DefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (Upshot.DataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : Upshot.DataResponseSerializerProtocol
}
extension Upshot.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (Upshot.DefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (Upshot.DownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : Upshot.DownloadResponseSerializerProtocol
}
extension Upshot.Request {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> Upshot.Result<Foundation.Data>
}
extension Upshot.DataRequest {
  public static func dataResponseSerializer() -> Upshot.DataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (Upshot.DataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension Upshot.DownloadRequest {
  public static func dataResponseSerializer() -> Upshot.DownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (Upshot.DownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension Upshot.Request {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> Upshot.Result<Swift.String>
}
extension Upshot.DataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> Upshot.DataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (Upshot.DataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension Upshot.DownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> Upshot.DownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (Upshot.DownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension Upshot.Request {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> Upshot.Result<Any>
}
extension Upshot.DataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> Upshot.DataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (Upshot.DataResponse<Any>) -> Swift.Void) -> Self
}
extension Upshot.DownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> Upshot.DownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (Upshot.DownloadResponse<Any>) -> Swift.Void) -> Self
}
extension Upshot.Request {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> Upshot.Result<Any>
}
extension Upshot.DataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> Upshot.DataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (Upshot.DataResponse<Any>) -> Swift.Void) -> Self
}
extension Upshot.DownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> Upshot.DownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (Upshot.DownloadResponse<Any>) -> Swift.Void) -> Self
}
@objc @_hasMissingDesignatedInitializers open class TaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: (any Swift.Error)?
  @objc deinit
}
public enum Result<Value> {
  case success(Value)
  case failure(any Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
extension Upshot.Result : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Upshot.Result : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension Upshot.Result {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> Upshot.Result<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> Upshot.Result<T>
  public func mapError<T>(_ transform: (any Swift.Error) -> T) -> Upshot.Result<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (any Swift.Error) throws -> T) -> Upshot.Result<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) -> Swift.Void) -> Upshot.Result<Value>
  @discardableResult
  public func withError(_ closure: (any Swift.Error) -> Swift.Void) -> Upshot.Result<Value>
  @discardableResult
  public func ifSuccess(_ closure: () -> Swift.Void) -> Upshot.Result<Value>
  @discardableResult
  public func ifFailure(_ closure: () -> Swift.Void) -> Upshot.Result<Value>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MiniGameController : Upshot.BKBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Upshot.MiniGameController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension Upshot.MiniGameController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class InteractiveTutorialWindow : UIKit.UIWindow {
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(windowScene: UIKit.UIWindowScene)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RedirectionManager : ObjectiveC.NSObject, StoreKit.SKStoreProductViewControllerDelegate {
  @objc public func redirectToPhone(phone: Swift.String)
  @objc public func redirectToBrowser(url: Swift.String)
  @objc public func webRedirection(url: Swift.String)
  @objc public func redirectStore(storeId: Swift.Double)
  @objc public func shareContent(text: Swift.String?, image: UIKit.UIImage?)
  @objc public func productViewControllerDidFinish(_ viewController: StoreKit.SKStoreProductViewController)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class USTriviaWireframe : ObjectiveC.NSObject {
  @objc public init?(activity: Upshot.BKActivity? = nil, tag: Swift.String? = nil, sessionId: Swift.String? = nil, appuid: Swift.String = "")
  @objc public func make() -> Upshot.USTriviaView?
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JourneyHandler {
  @discardableResult
  open func evaluateJR(method: Swift.String, arguments: [Any]?) -> JavaScriptCore.JSValue?
  @objc deinit
}
open class ServerTrustPolicyManager {
  final public let policies: [Swift.String : Upshot.ServerTrustPolicy]
  public init(policies: [Swift.String : Upshot.ServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> Upshot.ServerTrustPolicy?
  @objc deinit
}
public enum ServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class StreakManager : ObjectiveC.NSObject {
  @objc public func fetchStreakInfo(appuid: Swift.String, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImage {
  @objc dynamic open class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  @objc dynamic open class func gifImageWithURL(_ gifUrl: Foundation.URL?) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
  @objc dynamic open class func imageFromGif(_ gifUrl: Foundation.URL?) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers open class CustomActionWireframe : ObjectiveC.NSObject {
  @objc open var activity: Upshot.BKActivity?
  @objc open var tag: Swift.String?
  @objc open func make() -> Upshot.CustomActionViewController?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, (any Swift.Error)?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, (any Swift.Error)?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> Upshot.Request? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension Upshot.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension Upshot.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
extension Upshot.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension Upshot.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension Upshot.SessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
extension Foundation.NSNotification.Name {
  public struct Task {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct Key {
    public static let Task: Swift.String
  }
}
@objc @_inheritsConvenienceInitializers public class ActivityCallbackHandler : ObjectiveC.NSObject {
  @objc public func activityPresentedCallback(with data: [Swift.String : Any])
  @objc public func activitySkipCallback(with data: [Swift.String : Any])
  @objc public func activityRespondCallback(with data: [Swift.String : Any])
  @objc public func activityRedirectionCallback(with data: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RewardsManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func getRewardsStatus(appuid: Swift.String, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc public func getRewardsHistory(appuid: Swift.String, programId: Swift.String, type: Upshot.BKRewardHistoryType, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc public func getRewardDetails(appuid: Swift.String, programId: Swift.String, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc public func sendRedeemValue(appuid: Swift.String, transactionValue: Swift.Int, redeemValue: Swift.Int, programId: Swift.String, tag: Swift.String, completionBlock: @escaping (_ response: Upshot.JSON?, _ errorMessage: Swift.String?) -> Swift.Void)
  @objc deinit
}
public enum AFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: any Swift.Error)
    case propertyListEncodingFailed(error: any Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: any Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: any Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: any Swift.Error)
    case inputStreamReadFailed(error: any Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: any Swift.Error)
    case propertyListSerializationFailed(error: any Swift.Error)
  }
  case invalidURL(url: any Upshot.URLConvertible)
  case parameterEncodingFailed(reason: Upshot.AFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: Upshot.AFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: Upshot.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: Upshot.AFError.ResponseSerializationFailureReason)
}
extension Upshot.AFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension Upshot.AFError {
  public var urlConvertible: (any Upshot.URLConvertible)? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: (any Swift.Error)? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension Upshot.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Timeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension Upshot.Timeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Upshot.Timeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PushAmplificationHandler : ObjectiveC.NSObject {
  @objc public func updatePushReadStatus(msgId: Swift.String, appuid: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
open class MultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: Upshot.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public typealias JSON = [Swift.String : Any]
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TriviaBarGraphView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InteractiveTutorialRouter : ObjectiveC.NSObject {
  @objc public static func make(activity: Upshot.BKActivity, sessionId: Swift.String, appuid: Swift.String, tag: Swift.String?, dismissBlock: @escaping () -> Swift.Void) -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
extension Upshot.USTriviaView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
@objc @_inheritsConvenienceInitializers open class MiniGameRouter : ObjectiveC.NSObject {
  @objc public static func make(activity: Upshot.BKActivity, sessionId: Swift.String, appuid: Swift.String, tag: Swift.String?, dismissBlock: @escaping (Swift.String?) -> Swift.Void) -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class JourneyManager : ObjectiveC.NSObject {
  @objc public var version: Swift.String? {
    @objc get
    @objc set
  }
  @objc public static let manager: Upshot.JourneyManager
  @objc public func evaluateInbox(arguments: [Any]?)
  @objc public func getActivity(type: Swift.Int = -1, tag: Swift.String = "") -> Upshot.BKActivity?
  @objc public func sendResponse(arguments: [Any]?)
  @objc public func userProfile(arguments: [Any]?)
  @objc public func event(arguments: Any)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func findByAccessibilityIdentifier(identifier: Swift.String) -> UIKit.UIView?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class USTriviaView : Upshot.BKBaseViewController {
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Upshot.USTriviaView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
@_hasMissingDesignatedInitializers public class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(Upshot.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: Upshot.NetworkReachabilityManager.ConnectionType, b: Upshot.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (Upshot.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableOnWWAN: Swift.Bool {
    get
  }
  public var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  public var networkReachabilityStatus: Upshot.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  public var listenerQueue: Dispatch.DispatchQueue
  public var listener: Upshot.NetworkReachabilityManager.Listener?
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  public func startListening() -> Swift.Bool
  public func stopListening()
}
extension Upshot.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: Upshot.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: Upshot.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class InteractiveTutorialController : Upshot.BKBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Upshot.InteractiveTutorialController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension Upshot.Request {
  public enum ValidationResult {
    case success
    case failure(any Swift.Error)
  }
}
extension Upshot.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> Upshot.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping Upshot.DataRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension Upshot.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ temporaryURL: Foundation.URL?, _ destinationURL: Foundation.URL?) -> Upshot.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping Upshot.DownloadRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol RequestRetrier {
  func should(_ manager: Upshot.SessionManager, retry request: Upshot.Request, with error: any Swift.Error, completion: @escaping Upshot.RequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class Request {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: Upshot.TaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  public static func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension Upshot.Request : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension Upshot.Request : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataRequest : Upshot.Request {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping Upshot.DataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DownloadRequest : Upshot.Request {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: Upshot.DownloadRequest.DownloadOptions
    public static let removePreviousFile: Upshot.DownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = Upshot.DownloadRequest.DownloadOptions
    public typealias Element = Upshot.DownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: Upshot.DownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping Upshot.DownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> Upshot.DownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UploadRequest : Upshot.DataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping Upshot.UploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class StreamRequest : Upshot.Request {
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: any Upshot.URLRequestConvertible, with parameters: Upshot.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : Upshot.ParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: Upshot.URLEncoding.Destination, b: Upshot.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: Upshot.URLEncoding {
    get
  }
  public static var methodDependent: Upshot.URLEncoding {
    get
  }
  public static var queryString: Upshot.URLEncoding {
    get
  }
  public static var httpBody: Upshot.URLEncoding {
    get
  }
  public let destination: Upshot.URLEncoding.Destination
  public init(destination: Upshot.URLEncoding.Destination = .methodDependent)
  public func encode(_ urlRequest: any Upshot.URLRequestConvertible, with parameters: Upshot.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : Upshot.ParameterEncoding {
  public static var `default`: Upshot.JSONEncoding {
    get
  }
  public static var prettyPrinted: Upshot.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: any Upshot.URLRequestConvertible, with parameters: Upshot.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: any Upshot.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct PropertyListEncoding : Upshot.ParameterEncoding {
  public static var `default`: Upshot.PropertyListEncoding {
    get
  }
  public static var xml: Upshot.PropertyListEncoding {
    get
  }
  public static var binary: Upshot.PropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: any Upshot.URLRequestConvertible, with parameters: Upshot.Parameters?) throws -> Foundation.URLRequest
}
extension Upshot.JourneyHandler : JavaScriptCore.JSExport {}
extension Upshot.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension Upshot.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension Upshot.HTTPMethod : Swift.Equatable {}
extension Upshot.HTTPMethod : Swift.Hashable {}
extension Upshot.HTTPMethod : Swift.RawRepresentable {}
extension Upshot.URLEncoding.Destination : Swift.Equatable {}
extension Upshot.URLEncoding.Destination : Swift.Hashable {}
